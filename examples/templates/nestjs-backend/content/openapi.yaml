openapi: 3.0.0
info:
  title: ${{ values.name }} API
  description: ${{ values.description }}
  version: 1.0.0
  contact:
    name: ${{ values.owner }}
    email: ${{ values.owner }}@yourcompany.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:${{ values.port }}/${{ values.apiPrefix }}
    description: Development server
  - url: https://staging-api.yourcompany.com/${{ values.apiPrefix }}
    description: Staging server
  - url: https://api.yourcompany.com/${{ values.apiPrefix }}
    description: Production server

tags:
  - name: Health
    description: Service health and monitoring endpoints
  - name: Users
    description: User management operations
{% if values.enableAuth %}  - name: Authentication
    description: Authentication and authorization endpoints{% endif %}

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the current health status of the service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: ok
                timestamp: '2023-12-01T10:00:00.000Z'
                service: '${{ values.name }}'
                version: '1.0.0'

  /health/ready:
    get:
      tags:
        - Health
      summary: Readiness check endpoint
      description: Returns readiness status for Kubernetes probes
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: ready
                timestamp: '2023-12-01T10:00:00.000Z'
                service: '${{ values.name }}'
                version: '1.0.0'

  /users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieve a paginated list of all users
      operationId: getUsers
{% if values.enableAuth %}      security:
        - BearerAuth: []{% endif %}
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Search term for filtering users
          required: false
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '400':
          $ref: '#/components/responses/BadRequest'
{% if values.enableAuth %}        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'{% endif %}
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
{% if values.enableAuth %}      security:
        - BearerAuth: []{% endif %}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
            example:
              email: john.doe@example.com
              name: John Doe
              role: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
{% if values.enableAuth %}        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'{% endif %}
        '409':
          description: User with email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      operationId: getUserById
{% if values.enableAuth %}      security:
        - BearerAuth: []{% endif %}
      parameters:
        - name: id
          in: path
          description: User unique identifier
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
{% if values.enableAuth %}        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'{% endif %}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
{% if values.enableAuth %}      security:
        - BearerAuth: []{% endif %}
      parameters:
        - name: id
          in: path
          description: User unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
{% if values.enableAuth %}        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'{% endif %}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user from the system
      operationId: deleteUser
{% if values.enableAuth %}      security:
        - BearerAuth: []{% endif %}
      parameters:
        - name: id
          in: path
          description: User unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
{% if values.enableAuth %}        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'{% endif %}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
{% if values.enableAuth %}  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from AWS Cognito

{% endif %}  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - service
        - version
      properties:
        status:
          type: string
          description: Health status of the service
          enum: [ok, ready, error]
          example: ok
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: '2023-12-01T10:00:00.000Z'
        service:
          type: string
          description: Service name
          example: '${{ values.name }}'
        version:
          type: string
          description: Service version
          example: '1.0.0'

    CreateUser:
      type: object
      required:
        - email
        - name
        - role
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
          maxLength: 255
        name:
          type: string
          description: User full name
          example: John Doe
          minLength: 2
          maxLength: 100
        role:
          type: string
          description: User role in the system
          enum: [admin, user, guest]
          default: user
          example: user

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
          maxLength: 255
        name:
          type: string
          description: User full name
          example: John Doe
          minLength: 2
          maxLength: 100
        role:
          type: string
          description: User role in the system
          enum: [admin, user, guest]
          example: user

    UserResponse:
      type: object
      required:
        - id
        - email
        - name
        - role
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          description: User email address
          example: john.doe@example.com
        name:
          type: string
          description: User full name
          example: John Doe
        role:
          type: string
          description: User role in the system
          enum: [admin, user, guest]
          example: user
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
          example: '2023-12-01T10:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp
          example: '2023-12-01T15:30:00.000Z'

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: Current page number
          minimum: 1
          example: 1
        limit:
          type: integer
          description: Number of items per page
          minimum: 1
          example: 10
        total:
          type: integer
          description: Total number of items
          minimum: 0
          example: 50
        totalPages:
          type: integer
          description: Total number of pages
          minimum: 0
          example: 5

    Error:
      type: object
      required:
        - error
        - message
        - statusCode
      properties:
        error:
          type: string
          description: Error type
          example: Bad Request
        message:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Error message(s)
          example: Validation failed
        statusCode:
          type: integer
          description: HTTP status code
          example: 400
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: '2023-12-01T10:00:00.000Z'
        path:
          type: string
          description: Request path that caused the error
          example: /api/v1/users

  responses:
    BadRequest:
      description: Bad request - Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Bad Request
            message: Validation failed
            statusCode: 400
            timestamp: '2023-12-01T10:00:00.000Z'
            path: /api/v1/users
{% if values.enableAuth %}
    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Unauthorized
            message: Authentication required
            statusCode: 401
            timestamp: '2023-12-01T10:00:00.000Z'
            path: /api/v1/users

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Forbidden
            message: Insufficient permissions
            statusCode: 403
            timestamp: '2023-12-01T10:00:00.000Z'
            path: /api/v1/users
{% endif %}
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal Server Error
            message: An unexpected error occurred
            statusCode: 500
            timestamp: '2023-12-01T10:00:00.000Z'
            path: /api/v1/users
