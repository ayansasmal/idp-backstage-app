# Docker Compose for IDP Backstage App
# This provides multiple deployment options for the Backstage application
#
# For AWS RDS: Create a .env file with your database credentials
# See .env.example for the required environment variables

services:
  # Full-stack single container (for development/testing)
  backstage-fullstack:
    build:
      context: .
      dockerfile: Dockerfile
      target: fullstack
    ports:
      - "3000:3000"  # Frontend
      - "7007:7007"  # Backend API
    environment:
      - NODE_ENV=production
      # Core Configuration
      - APP_BASE_URL
      - ORGANIZATION_NAME
      - BACKEND_SECRET
      - BACKEND_BASE_URL
      - PORT
      - HOST
      
      # Database Configuration (AWS RDS)
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_SSL_REQUIRE=false
      - POSTGRES_SSL_REJECT_UNAUTHORIZED=false
      
      # GitHub Integration & OAuth2
      - GITHUB_TOKEN
      - GITHUB_CLIENT_ID
      - GITHUB_CLIENT_SECRET
      - GITHUB_APP_ID
      - GITHUB_WEBHOOK_SECRET
      - GITHUB_PRIVATE_KEY
      - GITHUB_ORG
      - GITHUB_DEFAULT_BRANCH
      - GITHUB_SYNC_FREQUENCY
      
      # CORS Configuration
      - CORS_ORIGIN
      
      # AWS Configuration
      - AWS_REGION
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - TECHDOCS_S3_BUCKET
      
      # ArgoCD Configuration
      - ARGOCD_SERVER_URL
      - ARGOCD_USERNAME
      - ARGOCD_PASSWORD
      - ARGOCD_AUTH_TOKEN
      - ARGOCD_STAGING_SERVER_URL
      - ARGOCD_STAGING_AUTH_TOKEN
      
      # Argo Workflows Configuration
      - ARGO_WORKFLOWS_SERVER_URL
      - ARGO_WORKFLOWS_AUTH_TOKEN
      - ARGO_WORKFLOWS_NAMESPACE
      - ARGO_WORKFLOWS_STAGING_SERVER_URL
      - ARGO_WORKFLOWS_STAGING_AUTH_TOKEN
      - ARGO_WORKFLOWS_STAGING_NAMESPACE
      
      # Monitoring & Observability
      - GRAFANA_DOMAIN
      - GRAFANA_URL
      - GRAFANA_API_KEY
      - PROMETHEUS_URL
      - PROMETHEUS_API_KEY
      - JAEGER_URL
      - KIALI_URL
      - KIALI_SERVICE_ACCOUNT_TOKEN
      - LIGHTHOUSE_URL
      
      # Unleash Feature Flags
      - UNLEASH_URL
      - UNLEASH_API_TOKEN
      - UNLEASH_CLIENT_KEY
      - UNLEASH_ENVIRONMENT
      
      # Quality Tools
      - SONARQUBE_URL
      - SONARQUBE_API_KEY
      - SNYK_TOKEN
      - SNYK_ORG_ID
      
      # Cost Management
      - ENGINEER_COST_PER_HOUR
      
      # Kubernetes Configuration
      - KUBERNETES_CLUSTER_URL
      - KUBERNETES_CLUSTER_NAME
      - KUBERNETES_SKIP_TLS_VERIFY
      - KUBERNETES_SERVICE_ACCOUNT_TOKEN
      - KUBERNETES_CA_FILE
      
      # Email Configuration
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_SECURE
      - SMTP_USERNAME
      - SMTP_PASSWORD
      
      # JIRA Integration
      - JIRA_HOST
      - JIRA_TOKEN
      
      # Scaffolder Configuration
      - SCAFFOLDER_DEFAULT_AUTHOR_NAME
      - SCAFFOLDER_DEFAULT_AUTHOR_EMAIL
    volumes:
      - ./app-config.yaml:/app/app-config.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health", "&&", "curl", "-f", "http://localhost:7007/api/unleash-feature-flags/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    profiles: ["fullstack"]

  # Backend service only
  backstage-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    ports:
      - "7007:7007"
    environment:
      - NODE_ENV=production
      # Core Configuration
      - APP_BASE_URL
      - ORGANIZATION_NAME
      - BACKEND_SECRET
      - BACKEND_BASE_URL
      - PORT
      - HOST
      
      # Database Configuration (AWS RDS)
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_SSL_REQUIRE=false
      - POSTGRES_SSL_REJECT_UNAUTHORIZED=false
      
      # GitHub Integration & OAuth2
      - GITHUB_TOKEN
      - GITHUB_CLIENT_ID
      - GITHUB_CLIENT_SECRET
      - GITHUB_APP_ID
      - GITHUB_WEBHOOK_SECRET
      - GITHUB_PRIVATE_KEY
      - GITHUB_ORG
      - GITHUB_DEFAULT_BRANCH
      - GITHUB_SYNC_FREQUENCY
      
      # CORS Configuration
      - CORS_ORIGIN
      
      # AWS Configuration
      - AWS_REGION
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - TECHDOCS_S3_BUCKET
      
      # ArgoCD Configuration
      - ARGOCD_SERVER_URL
      - ARGOCD_USERNAME
      - ARGOCD_PASSWORD
      - ARGOCD_AUTH_TOKEN
      - ARGOCD_STAGING_SERVER_URL
      - ARGOCD_STAGING_AUTH_TOKEN
      
      # Argo Workflows Configuration
      - ARGO_WORKFLOWS_SERVER_URL
      - ARGO_WORKFLOWS_AUTH_TOKEN
      - ARGO_WORKFLOWS_NAMESPACE
      - ARGO_WORKFLOWS_STAGING_SERVER_URL
      - ARGO_WORKFLOWS_STAGING_AUTH_TOKEN
      - ARGO_WORKFLOWS_STAGING_NAMESPACE
      
      # Monitoring & Observability
      - GRAFANA_DOMAIN
      - GRAFANA_URL
      - GRAFANA_API_KEY
      - PROMETHEUS_URL
      - PROMETHEUS_API_KEY
      - JAEGER_URL
      - KIALI_URL
      - KIALI_SERVICE_ACCOUNT_TOKEN
      - LIGHTHOUSE_URL
      
      # Unleash Feature Flags
      - UNLEASH_URL
      - UNLEASH_API_TOKEN
      - UNLEASH_CLIENT_KEY
      - UNLEASH_ENVIRONMENT
      
      # Quality Tools
      - SONARQUBE_URL
      - SONARQUBE_API_KEY
      - SNYK_TOKEN
      - SNYK_ORG_ID
      
      # Cost Management
      - ENGINEER_COST_PER_HOUR
      
      # Kubernetes Configuration
      - KUBERNETES_CLUSTER_URL
      - KUBERNETES_CLUSTER_NAME
      - KUBERNETES_SKIP_TLS_VERIFY
      - KUBERNETES_SERVICE_ACCOUNT_TOKEN
      - KUBERNETES_CA_FILE
      
      # Email Configuration
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_SECURE
      - SMTP_USERNAME
      - SMTP_PASSWORD
      
      # JIRA Integration
      - JIRA_HOST
      - JIRA_TOKEN
      
      # Scaffolder Configuration
      - SCAFFOLDER_DEFAULT_AUTHOR_NAME
      - SCAFFOLDER_DEFAULT_AUTHOR_EMAIL
    volumes:
      - ./app-config.yaml:/app/app-config.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7007/api/unleash-feature-flags/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles: ["microservices"]

  # Frontend service only
  backstage-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    ports:
      - "3000:3000"
    depends_on:
      - backstage-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    profiles: ["microservices"]

  # PostgreSQL database (optional - for production use)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=backstage_plugin_catalog
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["microservices", "fullstack"]

  # Unleash OSS (optional - for feature flags)
  unleash:
    image: unleashorg/unleash-server:latest
    ports:
      - "4242:4242"
    environment:
      - DATABASE_URL=postgres://postgres:secret@postgres:5432/unleash
      - DATABASE_SSL=false
      - LOG_LEVEL=warn
      - INIT_FRONTEND_API_TOKENS=default:development.unleash-insecure-frontend-api-token
      - INIT_CLIENT_API_TOKENS=default:development.unleash-insecure-api-token
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4242/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles: ["unleash"]

volumes:
  postgres_data:

networks:
  default:
    name: idp-backstage-network